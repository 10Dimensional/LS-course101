1. Let's do some "ASCII Art" (a stone-age form of nerd artowrk from back in the days
   before computers had video screens).
   
   For this exercise, write a one-line program tha creates the following output 10 times, with 
   the subsequent line indented 1 space to the right:
   
   The Flinstones Rock!
    The Flinstones Rock!
     The Flinstones Rock!
     
   10.times { |number| puts (" " * number) + The Flinstones Rock! }
   
2. Create a hash that expresses the frequency with which each letter occurs in this string:

  statement = "The Flinstones Rock"
  
  result = {}
  letters = ('A'..'Z').to_a + ('a'..'z').to_a
  letters.each do |letter|
    letter_frequency = statement.scan(letter).count
    result[letter] = letter_frequency if letter_frequency > 0
  end
  
3. The result of the following statement will be an error:

  puts "the value of 40 + 2 is " (40 + 2)
  
  Why is this and what are two possible ways to fix this?
  
  This will raise a type error because this script is trying to concat an integer to a string,
  could be revised to
  
  puts "the value of 40 + 2 is " (40 + 2).to_s 
  
  OR use string interpolation
  
  puts "the value of 40 + 2 is #{40 + 2}"
  
4. What happens when we modify an array while we are iterating over it? What would be output by this code?

  numbers = [1, 2, 3, 4]
  numbers.each do |number|
    p number
    numbers.shift(1)
  end
  
  Will output 1 3
  
  What would be output by this code?
  
  numbers = [1, 2, 3, 4]
  numbers.each do |number|
    p number
    numbers.pop(1)
  end
  
  Will output 1 2
  
5. Alan wrote the following method, which was intended to show all of the factors of the input number:

  def factors(number)
    dividend = number
    divisors = []
    begin
      divisors << number / dividend if number % dividend == 0
      dividend -= 1
    end until dividend == 0
    divisors
  end
  
  Alyssa noticed that this will fail if you call this with an input of 0 or a negative number and asked Alan to 
  change the loop. How can you change the loop construct (instead of using begin/end/until) to make this work?
  Note that we're not looking to find the factors for 0 or negative numbers, but we just want to handle it gracefully
  instead of raising an exception or going into an infinite loop.
  
  Use a while loop instead of do loop, that way the loop will just stop
  
  Bonus 1
  
  What is the purpose of the number % dividend == 0?
  
  To make sure everything divides smoooooooothly
  
  Bonus 2 
  
  What is the purpose of the second-to-last line in the method (the divisors before the method's end)?
  
  The actual things we want to be returned--otherwise the result of the last line would be returned
  
6. Alyssa was asked to write an implementation of a rolling buffer. Elements are added to the rolling
   buffer and if the buffer becomes full, then new elements that are added will displace the oldest elements
   in the buffer.
   
   She wrote two implementations saying, "Take your pick. Do you like << or + for modifying the buffer?". Is
   there a difference between the two, other than what operator she chose to use to add an element to the buffer?
   
   def rolling_buffer1(buffer, max_buffer_size, new_element)
    buffer << new_element
    buffer.shift if buffer.size >= max_buffer_size
    buffer
   end
   
   def rolling_buffer2(input_array, max_buffer_size, new_element)
    buffer = input_array + [new_element]
    buffer.shift if buffer.size >= max_buffer_size
    buffer
   end
   
   The first one mutates the caller, vs the second one which doesn't--so the second one is better for preserving
   the original data!
   
7. Alyssa asked Ben to write up a basic implementation of a Fibonacci calculator. A user passes in two numbers, and
   and the calculator will keep computing the sequence until some limit is reached.
   
   Ben coded up this implementation but complained that as soon as he ran it, he got an error. Something about the
   limit variable. What's wrong with the code?
   
   limit = 15
   
   def fib(first_num, second_num)
    while second_num < limit
      first_num = second_num
      second_num = sum
    end
    sum
   end
   
   result = fib(0, 1)
   puts "result is #{result}"
   
   The method doesn't have access to the glbal variable defined later in the code--we have to pass in a limit into
   the method
   
   my fix:
   
   def fib(first_num, second_num, limit)
   
8. In another example we used some built-in string methods to chnage the case of a string. A notably missing method is something
   provided in Rails, but not in Ruby itself...titleize! This method in Ruby on Rails creates a string that has each word capitalized 
   as it would be  in a title.
   
   Write your own version of the rails titleize implementation.
   
   def titleize(sentence) # my shitty solution
    words = sentence.split(' ')
    words.each do |word|
      word[0].capitalize
    end
    words.join('')
   end
   
   words.split.map { |words| word.capitalize }.join(' ') # LS's non-shitty solution, keep forgetting to use map!
   
9. Given the munsters hash below

   munsters = {
    "Herman" => { "age" => 32, "gender" => "male" },
    "Lily" => { "age" => 30, "gender" => "female" },
    "Grandpa" => { "age" => 402, "gender" => "male" },
    "Eddie" => { "age" => 10, "gender" => "male" },
    "Marilyn" => { "age" => 23, "gender" => "female"}
   }
   
   Modify the hash such that each member of the Munster family has an additional "age_group" key that has one of 
   three values describing the age group the family member is in (kid, adult, or senior). Your solution should produce
   the hash below:
   
   { "Herman" => { "age" => 32, "gender" => "male", "age_group" => "adult" },
    "Lily" => {"age" => 30, "gender" => "female", "age_group" => "adult" },
    "Grandpa" => { "age" => 402, "gender" => "male", "age_group" => "senior" },
    "Eddie" => { "age" => 10, "gender" => "male", "age_group" => "kid" },
    "Marilyn" => { "age" => 23, "gender" => "female", "age_group" => "adult" } }
    
   Note: a kid is in the age range 0 - 17, an adult is in the range 18-64 and a senior is aged 65+.
   
   hint: try using a case statement along with the Ruby Range objects in your solution
   
   munsters.each do |name, details|
    case details["age"]
    when 0...18
      details["age_group"] = "kid"
    when 18...65
      details["age_group"] = "adult"
    else
      details["age-group"] = "senior"
    end
   end
   
   
   
   
   
   
  
  
  
  
  