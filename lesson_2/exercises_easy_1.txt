Question 1 -- What would you expect the code below to print out?

numbers = [1, 2, 2, 3]
numbers.uniq

puts numbers

Answer -- [1, 2, 2, 3] # returns new array with only unique numbers, but PRINTS out original numbers value


Question 2 -- Describe the difference between ! and ? in Ruby. And explain what would happen in the following scenarios: 
1. What is the != and where should you use it?
    Means "does not equal", use it in a conditional statement or when comparing values (?)
2. Put ! before something, lke !user_name
    Means, "not user_name"
3. Put ! after something, like words.uniq!
    Mutates the caller, changes the original variable/object
4. Put ? before something
    Ternary operator for if..else
5. Put ? after something
    Turns an object into their boolean opposite
6. Put !! before something, like !!user_name
    Turns an object into their boolean equivalent
    
    
Question 3 -- Replace the word "important" with "urgent" in this string:

advice = "Few things in life are as important as house training your pet dinosaur."

advice = advice.sub! 'important', 'urgent' OR advice.gsub! 'important', 'urgent' # gsub = global substitution


Question 4 -- The Ruby Array class has several methods for removing items from the array. Two of them have very similar names. Let's see how they differ:

numbers = [1, 2, 3, 4, 5]

What does the following method call so (assume we reset numbers to the original array between method calls)?

numbers.delete_at(1) # deletes the number at index 1 
numbers.delete(1) # deletes the NUMBER "1"


Question 5 -- Programmatically determine if 42 lies between 10 and 100

(10..100).cover?(42)

Note: Difference between "cover?" and "include?" is that "cover?" is part of the Comparable module in
Ruby, which checks if an item fits between two end points, but isn't necessarily contained in an array or something.
"Include?" is related to the Enumerable module and checks whether an item is actually IN the range of elements.

Examples:

('a'..'z').include?('cc')     #=> false
('a'..'z').cover?('cc')       #=> true

('a'..'z').cover?('yellow')
# => true

('a'..'z').include?('yellow')
# => false

('yellaa'..'yellzz').include?('yellow')
 => true
 
 
Question 6 -- Starting with the string:
 
famous_words = "seven years ago..."

show two different ways to put the expected "Four score and" in front of it.

famous_words.insert("0", "for score and")

OR

"Four score and " + famous_words

famous_words.prepend("Four score and ")
 
"Four score and " << famous_words


Question 7 -- Fun with gsub:

def add_eight(number)
  number + 8
end

number = 2

how_deep = "number"
5.times { how_deep.gsub!("number", "add_eight(number)") }

This gives us a string that looks like a "recursive" method call:

"add_eight(add_eight(add_eight(add_eight(add_eight(number)))))"

If we take advantage of Ruby's Kernal#eval method to have it execute this string as if it were a "recursive" method call

eval(how_deep)

what will be the result? # 42


Question 8 -- If we build an array like this:

flinstones = ["Fred", "Wilma"]
flinstones << ["Barney", "Betty"]
flinstones << ["BamBam", "Pebbles"]

We will end up with this "nested" array:

["Fred", "Wilma", ["Barney", "Betty"], ["BamBam", "Pebbles"]]

Make this into an un-nested array.

flinstones.flatten!


Question 9 -- Given the hash below

flinstones = { "Fred" => 0, "Wilma" => 1, "Barney", => 2, "Betty" => 3, "BamBam" => 4, "Pebbles" => 5 }


Question 10 -- Given the array below

flinstones = ["Fred", "Barney", "Wilma", "Betty", "Pebbles", "BamBam"]

Turn this array into a hash where the names are the keys and the values are the positions in the array.

flinstones_hash = {}
flinstones.each_with_index do |name, index|
  flinstones_hash[name] = index
end

